(hastype (lambda (List Char) (tuple)) print)

(define print (lambda str (
    match str (
        (List::Nil (putchar '\n'))
        ((List::Cons char next) (Prelude::seq (putchar char) (print next)))
    )
)))

(hastype (List Char) numbers)

(define numbers (List::Cons '0' (List::Cons '1' (List::Cons '2' (List::Cons '3'
                (List::Cons '4' (List::Cons '5' (List::Cons '6' (List::Cons '7'
                (List::Cons '8' (List::Cons '9' List::Nil))
                ))))
                ))))
)

(hastype (lambda Word64 (List Char)) show)

(define show (lambda n str (
    if (Bool::and (Word64::eq 0 n) (List::neq List::Nil str))
        str
        if (Bool::and (Word64::eq 0 n) (List::eq List::Nil str)
            (List::Cons '0' List::Nil)
            (show (Word64::div n 10)
                  (List::Cons (List::!! numbers (Word64::mod n 10)) str)
            )
)))

(hastype (lambda Word64 Word64) factorial)

(define factorial (lambda n (
    if (Word64::le n 1)
        1
        (Word64::* n (factorial (Word64::- n 1)))
)))

(hastype (tuple) main)

(define main (lambda () (
    print (show (factorial (hastype Word64 42)) List::Nil)
)))
