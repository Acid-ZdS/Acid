(define List (type a (
    Nil
    (Cons a (List a))
)))

(hastype eq (lambda ((List a) (List a)) Bool))

(define eq (lambda (xs ys) (
    match xs (
        (Nil (match ys ((Nil Bool::True) ((Cons _ _) Bool::False)))
        ((Cons x xnext) (
            match ys (
                (Nil Bool::False)
                ((Cons y ynext) (Bool::and (Type::a::eq x y) (eq xnext ynext)))
            )
        ))
    )
)))

(hastype neq (lambda ((List a) (List a)) Bool))

(define neq (lambda (xs ys) (
    Bool::not (eq xs ys)
)))

(hastype !! (lambda ((List a) Word64) a))

(define !! (lambda (xs n) (
    match xs (
        (Nil (abort "Out of bounds.")) // Devrait être sous forme de (Cons …),
        ((Cons x next) (Prelude::if (Word64::eq 0 n) // mais j’ai pas la foi.
            x
            (!! next (Word64::- n 1))
        ))
    )
)))
